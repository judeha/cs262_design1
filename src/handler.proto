syntax = "proto3";

import "google/protobuf/empty.proto";

// gRPC service definition for client-server
service Handler {
    rpc Ending(EndingRequest) returns (EndingResponse);
    rpc CheckAccountExists(AccountExistsRequest) returns (AccountExistsResponse);
    rpc CreateAccount(CreateAccountRequest) returns (CreateAccountResponse);
    rpc LoginAccount(LoginAccountRequest) returns (LoginAccountResponse);
    rpc ListAccount(ListAccountRequest) returns (ListAccountResponse);
    rpc DeleteAccount(DeleteAccountRequest) returns (DeleteAccountResponse);
    rpc FetchHomepage(FetchHomepageRequest) returns (FetchHomepageResponse);
    rpc FetchMessageUnread(FetchMessagesUnreadRequest) returns (FetchMessagesUnreadResponse);
    rpc FetchMessageRead(FetchMessagesReadRequest) returns (FetchMessagesReadResponse);
    rpc DeleteMessage(DeleteMessageRequest) returns (DeleteMessageResponse);
    rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);
    rpc ReceiveMessage(ReceiveMessageRequest) returns (stream ReceiveMessageResponse);
}

// gRPC service definition for server-server
service Raft {
    rpc Vote(VoteRequest) returns (VoteResponse);
    rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
    rpc GetLeader(google.protobuf.Empty) returns (GetLeaderResponse);
}

// ----------------------------------------------------------------------------------------------
// Client Handler Messages
// ----------------------------------------------------------------------------------------------

// Message for Ending
message EndingRequest {
    string username = 1;
}
message EndingResponse {
    int32 status_code = 1;
}

// Message for checking if an account exists
message AccountExistsRequest {
    string username = 1;
}

message AccountExistsResponse {
    int32 status_code = 1;
    bool exists = 2;
}

// Message for creating an account
message CreateAccountRequest {
    string username = 1;
    string password = 2;
    string bio = 3;
}

message CreateAccountResponse {
    int32 status_code = 1;
}

// Message for logging into an account
message LoginAccountRequest {
    string username = 1;
    string password = 2;
}

message LoginAccountResponse {
    int32 status_code = 1;
    int32 count = 2;
    repeated Message msg_lst = 3;
}

// Message for listing accounts
message ListAccountRequest {
    string pattern = 1;
}

message ListAccountResponse {
    int32 status_code = 1;
    repeated Account acct_lst = 2;
}

// Message for deleting an account
message DeleteAccountRequest {
    string username = 1;
    string password = 2;
}

message DeleteAccountResponse {
    int32 status_code = 1;
}

// Message for fetching homepage
message FetchHomepageRequest {
    string username = 1;
}

message FetchHomepageResponse {
    int32 status_code = 1;
    int32 count = 2;
    repeated Message msg_lst = 3;
}

// Message for fetching read messages
message FetchMessagesReadRequest {
    string username = 1;
    int32 num = 2;
}

message FetchMessagesReadResponse {
    int32 status_code = 1;
    repeated Message msg_lst = 2;
}

// Message for fetching unread messages
message FetchMessagesUnreadRequest {
    string username = 1;
    int32 num = 2;
}

message FetchMessagesUnreadResponse {
    int32 status_code = 1;
    int32 count = 2;
    repeated Message msg_lst = 3;
}

// Message for deleting list of message ids
message DeleteMessageRequest {
    string username = 1;
    repeated int32 message_id_lst = 2;
}

message DeleteMessageResponse {
    int32 status_code = 1;
    int32 count = 2;
    repeated Message msg_lst = 3;
}

// Message for sending a message
message SendMessageRequest {
    string sender = 1;
    string receiver = 2;
    string content = 3;
    int32 timestamp = 4;
}

message SendMessageResponse {
    int32 status_code = 1;
}

// Message for receiving a message
message ReceiveMessageRequest {
    string username = 1;
}

message ReceiveMessageResponse {
    repeated Message msg_lst = 1;
}

// ----------------------------------------------------------------------------------------------
// Atomic Messages
// ----------------------------------------------------------------------------------------------

// Schema for a message sent between clients
message Message {
    int32 id = 1;
    string sender = 2;
    string receiver = 3;
    string content = 4;
    int64 timestamp = 5;
    bool delivered = 6;
}

// Schema for a client account
message Account {
    int32 id = 1;
    string username = 2;
    string bio = 3;
}

// ----------------------------------------------------------------------------------------------
// Raft Messages
// ----------------------------------------------------------------------------------------------

message Entry {
    oneof request {
        EndingRequest ending = 1;
        AccountExistsRequest acc_exists = 2;
        CreateAccountRequest create_acc = 3;
        LoginAccountRequest login_acc = 4;
        DeleteAccountRequest delete_acc = 5;
        FetchHomepageRequest fetch_homepage = 6;
        FetchMessagesUnreadRequest fetch_unread = 7;
        FetchMessagesReadRequest fetch_read = 8;
        DeleteMessageRequest delete_msg = 9;
        SendMessageRequest send_msg = 10;
        ReceiveMessageRequest receive_mesg = 11;
        string connect = 12;
    }
}

message VoteRequest {
    int32 cand_id = 1;
    int32 cand_term = 2;
    int32 prev_log_idx = 3;
    int32 prev_log_term = 4;
}

message VoteResponse {
    int32 term = 1;
    bool success = 2;
}

message AppendEntriesRequest {
    string leader_addr = 1;
    int32 term = 2;
    int32 prev_log_term = 3;
    int32 prev_log_idx = 4;
    repeated Entry entries = 5;
    int32 commit = 6;
}

message AppendEntriesResponse {
    int32 term = 1;
    bool success = 2;
}

message GetLeaderResponse {
    string leader_addr = 1;
}